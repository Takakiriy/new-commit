#!/bin/bash
if echo "$0" | grep "/" | grep -E -v "bash-debug|systemd" > /dev/null; then  cd "${0%/*}"  ;fi  # cd this file folder
LocommitCommand="../bin/locommit"

function  AllTest() {
    DetectTestEnvironment

    Test_Error
    Test_DeleteFolder
    Test_ResolvePath
    Test_Assert
    Test_CutLastOf
    Test_CopyFolder
    Test_LessThanVersion
    Test_ErrorIfLastIs

    Test_1
    Test_Clone
    Test_ChangeAndClone
    Test_Clone_File
    Test_InWorkingDirectory
    Test_InWorkingSubDirectory
    Test_NoUpdate
    Test_NoModifiedConflict
    Test_NoGitOption
    Test_Diff
    Test_Diff_InWorkingDirectory
    Test_Diff_InWorkingSubDirectory
    Test_Push_1
    Test_Push_GitWorkingWithoutLocalCommit
    Test_Push_NoCommitNewNoDiff
    Test_Push_NoCommitError
    Test_Push_Null
    Test_Push_RemovedFiles
    Test_Push_SameOrParentFolderError
    Test_Pull_1
    Test_Pull_NoInput
    Test_Pull_Merge
    Test_Pull_Conflict
    Test_Pull_IgnoreInRepository
    Test_Pull_Push_InWorkingSubDirectory
    Test_Pull_Push_TargetInWorkingDirectory
    Test_Clone_Pull_Push_Zip
    Test_PullBase_1
    Test_PullBase_NoInput
    Test_PullBase_Conflict
    Test_Pull_Push_File_1
    Test_InitBarePush_OutOfGitWorking
    Test_InitBarePush_InGitWorking
    EndOfTest
}

function  Test_1() {
    echo  ""
    echo  "### Test_1 --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"

    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist     "_testing/.commit/example.txt"
    AssertExist     "_testing/.commit/.gitignore"
    AssertNotExist  "_testing/.commit/build"
    AssertNotExist  "_testing/.commit/build/out"
    if [ "${InGitWorking}" == "${False}" ]; then
        AssertExist     "_testing/.git"
    fi
    AssertReadOnly  "_testing/.commit/example.txt"
    AssertReadOnly  "_testing/.commit/.gitignore"
    DeleteFolder  "_testing"
}

function  Test_Clone() {
    echo  ""
    echo  "### Test_Clone --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p  "_testing/repository/build"
    mkdir -p  "_testing/repository/sub"

    #// Set up
    echo "x" > "_testing/repository/a.txt"
    echo "x" > "_testing/repository/build/out"
    echo "x" > "_testing/repository/sub/b.txt"
    echo "build"      > "_testing/repository/.gitignore"
    echo ".commit"   >> "_testing/repository/.gitignore"
    echo ".commit_*" >> "_testing/repository/.gitignore"

    #// Main
    "${LocommitCommand}" clone "_testing/repository" "_testing/a/work"  ||  Error

    #// Check
    AssertNotReadOnly  "_testing/a/work/a.txt"
    AssertNotReadOnly  "_testing/a/work/sub/b.txt"
    AssertNotExist     "_testing/a/work/build/out"
    AssertReadOnly     "_testing/a/work/.commit/a.txt"
    AssertReadOnly     "_testing/a/work/.commit/sub/b.txt"
    AssertNotExist     "_testing/a/work/.commit/build/out"
    AssertExist        "_testing/a/work/.git"
    AssertExist        "_testing/a/work/.gitignore"  #// Default settings

    #// Set up
    echo  "Error test:"
    rm  "_testing/a/work/a.txt"  #// Because of checking not to copy it by clone

    #// Main
    "${LocommitCommand}" clone "_testing/repository" "_testing/a/work"  &&  Error

    #// Check
    AssertNotExist  "_testing/a/work/a.txt"
    DeleteFolder  "_testing"
}

function  Test_ChangeAndClone() {
    echo  ""
    echo  "### Test_ChangeAndClone --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p  "_testing/repository"

    #// Set up
        #// Make a repository
        StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
        echo "x" > "_testing/repository/edit.txt"
        echo "x" > "_testing/repository/ignored.txt"
        echo ".commit"    > "_testing/repository/.gitignore"
        echo ".commit_*" >> "_testing/repository/.gitignore"
        pushd  "_testing/repository"  > /dev/null
        GitInit
        git add "."  > /dev/null  2>&1
        git commit  -m "Already files exist"  > /dev/null  2>&1
        popd  > /dev/null
        EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

        #// Edit files in the repository folder
        echo "edited"       > "_testing/repository/edit.txt"
        echo "ignored.txt" >> "_testing/repository/.gitignore"
        echo "new"          > "_testing/repository/new.txt"

    #// Main
    "${LocommitCommand}" clone "_testing/repository" "_testing/a/work"  ||  Error

    #// Check
    if [ "$( cat    "_testing/a/work/edit.txt" )" != "edited" ]; then  Error  ;fi
    AssertNotExist  "_testing/a/work/ignored.txt"
    if [ "$( cat    "_testing/a/work/new.txt" )" != "new" ]; then  Error  ;fi
    DeleteFolder  "_testing/a/work"

    #// Set up
    echo  "Error test:"
    echo ".commit"    > "_testing/repository/.gitignore"
    echo ".commit_*" >> "_testing/repository/.gitignore"
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

    pushd  "_testing/repository"  > /dev/null
    git reset  > /dev/null
    echo "edited2"  > "edit.txt"
    git add           "edit.txt"
    local  statusBefore="$( git status --short )"
    popd  > /dev/null
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

    #// Main
    "${LocommitCommand}" clone "_testing/repository" "_testing/a/work"  &&  Error

    #// Check
    AssertNotExist  "_testing/a/work"
    pushd  "_testing/repository"  > /dev/null
    local  status="$( git status --short )"
    popd  > /dev/null
    if [ "${status}" != "${statusBefore}" ]; then  Error  ;fi
    DeleteFolder  "_testing"
}

function  Test_Clone_File() {
    echo  ""
    echo  "### Test_Clone_File --------------------------------"
    DeleteFolder  "_testing"

    #// Set up
    mkdir -p  "_testing/repository"
    echo "x" > "_testing/repository/example.txt"
    echo "n" > "_testing/repository/not_used_in_repository.txt"

    #// Main
    echo  "$ locommit clone  _testing/repository/  _testing/a/work  --file  example.txt"
    "${LocommitCommand}" clone "_testing/repository/"  "_testing/a/work"  --file "example.txt"  ||  Error

    #// Check
    AssertNotReadOnly  "_testing/a/work/example.txt"
    AssertNotExist     "_testing/a/work/not_used_in_repository.txt"
    AssertReadOnly     "_testing/a/work/.commit/example.txt"
    AssertNotExist     "_testing/a/work/.commit/not_used_in_repository.txt"
    AssertNotExist     "_testing/a/work/.git"

    #// Error case of destination file exists
    echo  "$ locommit clone  _testing/repository/  _testing/a/work  --file  example.txt"
    "${LocommitCommand}" clone "_testing/repository/"  "_testing/a/work"  --file "example.txt"  &&  Error

    #// Case of destination base folder exists
    mkdir -p  "_testing/a/work"
    if [ "${TestEnvironmentNum}" == 4 ]; then
        SetNotReadOnly  "_testing/a/work/.commit/example.txt"
    fi
    rm     "_testing/a/work/example.txt"
    rm -f  "_testing/a/work/.commit/example.txt"
    echo "y" > "_testing/repository/example.txt"

    echo  "$ locommit clone  _testing/repository/  _testing/a/work  --file  example.txt"
    "${LocommitCommand}" clone "_testing/repository/"  "_testing/a/work"  --file "example.txt"  ||  Error

    #// Check
    AssertContents     "_testing/a/work/example.txt"  "y"
    AssertNotReadOnly  "_testing/a/work/example.txt"
    AssertContents     "_testing/a/work/.commit/example.txt"  "y"
    AssertReadOnly     "_testing/a/work/.commit/example.txt"
    DeleteFolder  "_testing"
}

function  Test_InWorkingDirectory() {
    echo  ""
    echo  "### Test_InWorkingDirectory --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    AssertExist  ".git"
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

    "../${LocommitCommand}"  &&  TestError
    "../${LocommitCommand}" --no-git  ||  TestError
    AssertExist  ".git"
    popd > /dev/null

    AssertExist        "_testing/.commit/example.txt"
    AssertExist        "_testing/.commit/.gitignore"
    AssertNotExist     "_testing/.commit/build"
    AssertNotExist     "_testing/.commit/build/out"
    AssertNotReadOnly  "_testing/.commit/example.txt"
    AssertNotReadOnly  "_testing/.commit/.gitignore"
    DeleteFolder  "_testing"
}

function  Test_InWorkingSubDirectory() {
    echo  ""
    echo  "### Test_InWorkingSubDirectory --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/sub/build"
    echo "x" > "_testing/sub/build/out"
    echo "x" > "_testing/sub/example.txt"
    echo "build" > "_testing/sub/.gitignore"

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    cd  "sub"

    "../../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist     "_testing/.git"
    AssertExist     "_testing/sub/.git"
    AssertExist     "_testing/sub/.commit/example.txt"
    AssertExist     "_testing/sub/.commit/.gitignore"
    AssertNotExist  "_testing/sub/.commit/build"
    AssertNotExist  "_testing/sub/.commit/build/out"
    AssertReadOnly  "_testing/sub/.commit/example.txt"
    AssertReadOnly  "_testing/sub/.commit/.gitignore"

    #// Check if no error of submodule, when git add is run.
    DeleteFolder  "_testing/sub/.git"
    echo  "a" >  "_testing/sub/a"
    pushd "_testing" > /dev/null
    echo  "git status"
    if git status --short | grep 'sub/a'; then  : ;  else  TestError  ;fi
    echo  "git add ."

    git add "."  ||  TestError
    popd > /dev/null
    DeleteFolder  "_testing"
}

function  Test_NoUpdate() {  #// Base test is "Test_1"
    echo  ""
    echo  "### Test_NoUpdate --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    mkdir -p "_testing/.commit"
    echo "x"       > "_testing/example.txt"
    echo "x"       > "_testing/build/out"
    echo ".commit" > "_testing/.gitignore"
    echo "build"  >> "_testing/.gitignore"
    echo "x"       > "_testing/.commit/example.txt"
    echo ".commit" > "_testing/.commit/.gitignore"
    echo "build"  >> "_testing/.commit/.gitignore"

    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertNotExist  "_testing/.commit_new/"

    AssertExist     "_testing/.commit/example.txt"
    AssertExist     "_testing/.commit/.gitignore"
    AssertNotExist  "_testing/.commit/.commit"
    AssertNotExist  "_testing/.commit/build"
    AssertNotExist  "_testing/.commit/build/out"
    DeleteFolder  "_testing"
}

function  Test_NoModifiedConflict() {  #// Base test is "Test_1"
    echo  ""
    echo  "### Test_NoModifiedConflict --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x"                   > "_testing/example.txt"
    echo "<<<<<<< HEAD"       >> "_testing/example.txt"
    echo "    my edit"        >> "_testing/example.txt"
    echo "======="            >> "_testing/example.txt"
    echo "    others edit"    >> "_testing/example.txt"
    echo ">>>>>>> __Others__" >> "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"

    AssertNotExist  "_testing/.commit"

    echo  "$ locommit"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertExist  "_testing/.commit"

    echo  "$ locommit"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError  #// 2nd execute
    popd > /dev/null
    AssertExist     "_testing/.commit"
    AssertNotExist  "_testing/.commit_new"

    DeleteFolder  "_testing"
}

function  Test_NoGitOption() {
    echo  ""
    echo  "### Test_NoGitOption --------------------------------"

    #// .git folder
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    AssertExist  ".git"
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

    "../${LocommitCommand}" --no-git  ||  TestError
    popd > /dev/null
    AssertExist  "_testing/.commit"
    AssertExist  "_testing/.commit/example.txt"

    #// without .git folder
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"
    pushd "_testing" > /dev/null

    "../${LocommitCommand}" --no-git  ||  TestError
    popd > /dev/null
    AssertExist     "_testing/.commit"
    AssertExist     "_testing/.commit/example.txt"
    AssertNotExist  "_testing/.git"
    DeleteFolder  "_testing"
}

function  Test_Diff() {  #// Base test is "Test_1"
    echo  ""
    echo  "### Test_Diff --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    mkdir -p "_testing/.commit"
    echo "x"       > "_testing/example.txt"
    echo "x"       > "_testing/build/out"
    echo ".commit" > "_testing/.gitignore"
    echo "build"  >> "_testing/.gitignore"
    echo "2"       > "_testing/.commit/example.txt"

    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist     "_testing/.commit/example.txt"
    AssertNotExist  "_testing/.commit/.gitignore"

    AssertExist     "_testing/.commit_new/example.txt"
    AssertExist     "_testing/.commit_new/.gitignore"
    AssertNotExist  "_testing/.commit_new/.commit"
    AssertNotExist  "_testing/.commit_new/build"
    AssertNotExist  "_testing/.commit_new/build/out"
    DeleteFolder  "_testing"
}

function  Test_Diff_InWorkingDirectory() {  #// Base test is "Test_Diff" and "Test_InWorkingDirectory"
    echo  ""
    echo  "### Test_Diff_InWorkingDirectory --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    mkdir -p "_testing/.commit"
    echo "x"       > "_testing/example.txt"
    echo "x"       > "_testing/build/out"
    echo ".commit" > "_testing/.gitignore"
    echo "build"  >> "_testing/.gitignore"
    echo "2"       > "_testing/.commit/example.txt"

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

    "../${LocommitCommand}"  ||  TestError
    AssertExist  ".git"
    popd > /dev/null

    AssertExist     "_testing/.commit/example.txt"
    AssertNotExist  "_testing/.commit/.gitignore"

    AssertExist     "_testing/.commit_new/example.txt"
    AssertExist     "_testing/.commit_new/.gitignore"
    AssertNotExist  "_testing/.commit_new/.commit"
    AssertNotExist  "_testing/.commit_new/build"
    AssertNotExist  "_testing/.commit_new/build/out"
    DeleteFolder  "_testing"
}

function  Test_Diff_InWorkingSubDirectory() {  #// Base test is "Test_Diff_InWorkingDirectory" and "Test_InWorkingSubDirectory"
    echo  ""
    echo  "### Test_Diff_InWorkingSubDirectory --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/sub/build"
    mkdir -p "_testing/sub/.commit"
    echo "x"       > "_testing/sub/example.txt"
    echo "x"       > "_testing/sub/build/out"
    echo ".commit" > "_testing/sub/.gitignore"
    echo "build"  >> "_testing/sub/.gitignore"
    echo "2"       > "_testing/sub/.commit/example.txt"

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    cd  "sub"

    "../../${LocommitCommand}"  ||  TestError
    cd  ".."
    AssertExist  ".git"
    popd > /dev/null

    AssertExist     "_testing/sub/.commit/example.txt"
    AssertNotExist  "_testing/sub/.commit/.gitignore"

    AssertExist     "_testing/sub/.commit_new/example.txt"
    AssertExist     "_testing/sub/.commit_new/.gitignore"
    AssertNotExist  "_testing/sub/.commit_new/.commit"
    AssertNotExist  "_testing/sub/.commit_new/build"
    AssertNotExist  "_testing/sub/.commit_new/build/out"
    DeleteFolder  "_testing"
}

function  Test_Push_1() {
    echo  ""
    echo  "### Test_Push_1 --------------------------------"
    DeleteFolder  "_testing"
    MakePushTestFiles
    echo "del" > "_testing/will_delete.txt"

    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError

    echo "after" > "example.txt"
    echo "new" > "new X.txt"
    rm  "will_delete.txt"

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError

    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"  ||  TestError

    popd > /dev/null

    AssertNotExist  "_testing/.commit_new"

    AssertExist     "_testing/.commit/example.txt"
    AssertExist     "_testing/.commit/new X.txt"
    AssertExist     "_testing/.commit/.gitignore"
    AssertNotExist  "_testing/.commit/build"
    AssertNotExist  "_testing/.commit/build/out"
    AssertReadOnly  "_testing/.commit/example.txt"
    AssertReadOnly  "_testing/.commit/new X.txt"
    AssertReadOnly  "_testing/.commit/.gitignore"
    AssertContents  "_testing/new X.txt"  'new\n'

    AssertExist        "_testing/_repository/example.txt"
    AssertExist        "_testing/_repository/new X.txt"
    AssertExist        "_testing/_repository/.gitignore"
    AssertExist        "_testing/_repository/.git"
    AssertExist        "_testing/_repository/old_files"
    AssertNotExist     "_testing/_repository/build"
    AssertNotExist     "_testing/_repository/build/out"
    AssertNotReadOnly  "_testing/_repository/example.txt"
    AssertNotReadOnly  "_testing/_repository/new X.txt"
    AssertNotReadOnly  "_testing/_repository/.gitignore"

    local  gitStatus="$(cd _testing  &&  git config --local  core.fileMode  false  &&
        GitStatusCurrentFolder)"
    if [ "${gitStatus}" != "?? ./" ]; then  #// Case of parent .git does not check any status.
        if [ "${gitStatus}" != "" ]; then  TestError;  fi
    fi
    DeleteFolder  "_testing"
}

function  Test_Push_GitWorkingWithoutLocalCommit() {
    echo  ""
    echo  "### Test_Push_GitWorkingWithoutLocalCommit --------------------------------"
    DeleteFolder  "_testing"
    MakePushTestFiles

    pushd "_testing" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "."  > /dev/null  2>&1
    git commit  -m "temporary"  > /dev/null  2>&1
    AssertExist     ".git"
    AssertNotExist  ".commit"
    AssertNotExist  ".commit_new"
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    popd > /dev/null
    pushd "_testing" > /dev/null

    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"  ||  TestError
    popd > /dev/null

    AssertExist        "_testing/_repository/example.txt"
    AssertNotReadOnly  "_testing/_repository/example.txt"
    DeleteFolder  "_testing"
}

function  Test_Push_NoCommitNewNoDiff() {
    echo  ""
    echo  "### Test_Push_NoCommitNewNoDiff --------------------------------"
    DeleteFolder  "_testing"
    MakePushTestFiles

    pushd "_testing" > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    AssertExist     ".commit"
    AssertNotExist  ".commit_new"

    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"  ||  TestError
    popd > /dev/null

    AssertExist        "_testing/_repository/example.txt"
    AssertNotReadOnly  "_testing/_repository/example.txt"
    DeleteFolder  "_testing"
}

function  Test_Push_NoCommitError() {
    echo  ""
    echo  "### Test_Push_NoCommitError --------------------------------"
    #// Error test of no .commit_new but different contents
    DeleteFolder  "_testing"
    MakePushTestFiles

    pushd "_testing" > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError

    rm  "example.txt"
    AssertExist     ".commit"
    AssertNotExist  ".commit_new"

    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"
    local  exitCode=$?
    popd > /dev/null

    if [ "${exitCode}" == "0" ]; then
        TestError  "Failed"
    fi
    AssertNotExist  "_testing/_repository/example.txt"
    DeleteFolder  "_testing"
}

function  Test_Push_Null() {
    echo  ""
    echo  "### Test_Push_Null --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"     > "_testing/.gitignore"
    echo ".commit_*"  >> "_testing/.gitignore"
    mkdir -p "_testing/build"

    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"

    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertExist     "_testing/.commit"
    AssertNotExist  "_testing/.commit_new"

    echo "a new"  > "_testing/example.txt"
    echo "b"     >> "_testing/example.txt"
    echo "c"     >> "_testing/example.txt"

    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertExist  "_testing/.commit_new"

    echo  "$ locommit push /dev/null"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}" push "/dev/null"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a new\nb\nc\n'
    AssertNotExist  "_testing/.commit_new"
    AssertExist     "_testing/.commit"
    AssertContents  "_testing/.commit/example.txt"  'a new\nb\nc\n'
    DeleteFolder  "_testing"
}

function  Test_Push_RemovedFiles() {
    echo  ""
    echo  "### Test_Push_RemovedFiles --------------------------------"

    #// Set up
        DeleteFolder  "_testing"

        #// Make a "repository" folder
        mkdir -p  "_testing/repository/sub"
        echo ".commit"     > "_testing/repository/.gitignore"
        echo ".commit_*"  >> "_testing/repository/.gitignore"
        echo "x" > "_testing/repository/x"
        echo "y" > "_testing/repository/y"
        echo "x" > "_testing/repository/sub/x"
        echo "y" > "_testing/repository/sub/y"

        #// Make a "working" and ".commit" folder
        echo  "$ locommit clone"
        "${LocommitCommand}" clone  "_testing/repository"  "_testing/working"  ||  TestError

        #// Make a ".commit_new" folder
        rm  "_testing/working/x"
        rm  "_testing/working/sub/y"
        echo  "updated"  >  "_testing/working/y"
        pushd "_testing/working" > /dev/null
        echo  "$ locommit"
        "../../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        #// Add other files to "repository" folder
        echo "z" > "_testing/repository/z"
        echo "z" > "_testing/repository/sub/z"

    #// Main
    pushd "_testing/working" > /dev/null
    echo  "$ locommit push"
    "../../${LocommitCommand}" push  "../repository"  ||  TestError
    popd > /dev/null

    #// Check
    AssertNotExist  "_testing/repository/x"
    AssertExist     "_testing/repository/y"
    AssertExist     "_testing/repository/sub/x"
    AssertNotExist  "_testing/repository/sub/y"
    AssertExist     "_testing/repository/z"
    AssertExist     "_testing/repository/sub/z"
    if [ "$( cat "_testing/repository/y" )" != "updated" ]; then  TestError  ;fi
    DeleteFolder  "_testing"
}

function  Test_Push_SameOrParentFolderError() {
    echo  ""
    echo  "### Test_Push_SameOrParentFolderError --------------------------------"

    #// Set up
        DeleteFolder  "_testing"
        mkdir -p "_testing/main"
        echo ".commit"     > "_testing/main/.gitignore"
        echo ".commit_*"  >> "_testing/main/.gitignore"
        echo "x" > "_testing/main/x"

        #// Make a ".commit" folder
        pushd "_testing/main" > /dev/null
        echo  "$ locommit"
        "../../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        #// Make a ".commit_new" folder
        echo "x2" > "_testing/main/x"
        pushd "_testing/main" > /dev/null
        echo  "$ locommit"
        "../../${LocommitCommand}"  ||  TestError
        popd > /dev/null

    #// push command to same folder. This command will be occurred an error
    pushd "_testing/main" > /dev/null
    echo  "$ locommit push ."
    "../../${LocommitCommand}" push "."
    local  exitCode="$?"
    popd > /dev/null
    if [ "${exitCode}" == "0" ]; then  TestError  ;fi

    #// push command to parent folder. This command will be occurred an error
    pushd "_testing/main" > /dev/null
    echo  "$ locommit push .."
    "../../${LocommitCommand}" push ".."
    local  exitCode="$?"
    popd > /dev/null
    if [ "${exitCode}" == "0" ]; then  TestError  ;fi
    DeleteFolder  "_testing"
}

function  Test_Pull_1() {
    echo  ""
    echo  "### Test_Pull_1 --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    mkdir -p "_testing/build"

    echo "x"  > "_testing/build/out"
    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"

    mkdir -p "_testing/_repository"
    cp  "_testing/.gitignore"  "_testing/_repository/.gitignore"
    echo "a"      > "_testing/_repository/example.txt"
    echo "b"     >> "_testing/_repository/example.txt"
    echo "c new" >> "_testing/_repository/example.txt"

    #// pull command
    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError

    echo  "$ locommit pull _repository"
    "../${LocommitCommand}" pull "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a\nb\nc new\n'
    AssertExist     "_testing/.commit_ours"
    AssertExist     "_testing/.commit_theirs"
    AssertNotExist  "_testing/.commit_new"
    AssertExist     "_testing/.commit"

    #// push command
    pushd "_testing" > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist  "_testing/.commit_new"

    pushd "_testing" > /dev/null
    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/_repository/example.txt"  'a\nb\nc new\n'
    AssertNotExist  "_testing/.commit_ours"
    AssertNotExist  "_testing/.commit_theirs"
    AssertNotExist  "_testing/.commit_new"
    DeleteFolder  "_testing"
}

function  Test_Pull_NoInput() {  #// Base test is "Test_Pull_1"
    echo  ""
    echo  "### Test_Pull_NoInput --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    mkdir -p "_testing/build"

    echo "x"  > "_testing/build/out"
    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"

    mkdir -p "_testing/_repository"
    cp  "_testing/.gitignore"  "_testing/_repository/.gitignore"
    echo "a"  > "_testing/_repository/example.txt"
    echo "b" >> "_testing/_repository/example.txt"
    echo "c" >> "_testing/_repository/example.txt"

    pushd "_testing/_repository" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "." > /dev/null
    git commit -m "1st" > /dev/null
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    popd > /dev/null

    #// pull command
    echo  "$ locommit"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertContents  "_testing/.commit/example.txt"  'a\nb\nc\n'

    echo "a"      > "_testing/example.txt"
    echo "b"     >> "_testing/example.txt"
    echo "c new" >> "_testing/example.txt"

    echo  "$ locommit"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertContents  "_testing/.commit/example.txt"      'a\nb\nc\n'
    AssertContents  "_testing/.commit_new/example.txt"  'a\nb\nc new\n'

    echo  "$ locommit pull _repository"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}" pull "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a\nb\nc new\n'
    AssertNotExist  "_testing/.commit_ours"
    AssertNotExist  "_testing/.commit_theirs"
    AssertContents  "_testing/.commit/example.txt"      'a\nb\nc\n'
    AssertContents  "_testing/.commit_new/example.txt"  'a\nb\nc new\n'

    #// second pull command (It requests no error)
    echo  "$ locommit pull _repository"
    pushd "_testing" > /dev/null
    "../${LocommitCommand}" pull "_repository"
    local  exitCode=$?
    local  branches="$( git branch )"
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a\nb\nc new\n'
    AssertNotExist  "_testing/.commit_ours"
    AssertNotExist  "_testing/.commit_theirs"
    AssertContents  "_testing/.commit/example.txt"      'a\nb\nc\n'
    AssertContents  "_testing/.commit_new/example.txt"  'a\nb\nc new\n'
    echo "${branches}" | grep " __locommit_commit_theirs$"  &&  TestError

    #// push command
    pushd "_testing" > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist  "_testing/.commit_new"

    pushd "_testing" > /dev/null
    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/_repository/example.txt"  'a\nb\nc new\n'
    AssertContents  "_testing/.commit/example.txt"      'a\nb\nc new\n'
    AssertNotExist  "_testing/.commit_ours"
    AssertNotExist  "_testing/.commit_theirs"
    AssertNotExist  "_testing/.commit_new"
    DeleteFolder  "_testing"
}

function  Test_Pull_Merge() {
    echo  ""
    echo  "### Test_Pull_Merge --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    mkdir -p "_testing/build"

    echo "x" > "_testing/build/out"
    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"

    mkdir -p "_testing/_repository"
    cp  "_testing/.gitignore"  "_testing/_repository/.gitignore"
    echo "a"      > "_testing/_repository/example.txt"
    echo "b"     >> "_testing/_repository/example.txt"
    echo "c new" >> "_testing/_repository/example.txt"

    pushd "_testing/_repository" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "." > /dev/null
    git commit -m "1st" > /dev/null
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    popd > /dev/null

    #// pull command
        pushd "_testing" > /dev/null

        echo  "$ locommit"
        "../${LocommitCommand}"  ||  TestError

        echo "a new" > "example.txt"
        echo "b"    >> "example.txt"
        echo "c"    >> "example.txt"

        echo  "$ locommit pull _repository"
        "../${LocommitCommand}" pull "_repository"
        local  exitCode=$?
        popd > /dev/null
        if [ "${exitCode}" != "0" ]; then
            TestError  "Failed"
        fi

        AssertContents  "_testing/example.txt"  'a new\nb\nc new\n'
        AssertExist     "_testing/.commit_ours"
        AssertExist     "_testing/.commit_theirs"
        AssertNotExist  "_testing/.commit_new"
        AssertExist     "_testing/.commit"

    #// push command
        pushd "_testing" > /dev/null
        echo  "$ locommit"
        "../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        AssertExist  "_testing/.commit_new"

        pushd "_testing" > /dev/null
        echo  "$ locommit push _repository"
        "../${LocommitCommand}" push "_repository"
        local  exitCode=$?
        popd > /dev/null
        if [ "${exitCode}" != "0" ]; then
            TestError  "Failed"
        fi

        AssertContents  "_testing/_repository/example.txt"  'a new\nb\nc new\n'
        AssertNotExist  "_testing/.commit_new"
        AssertNotExist  "_testing/.commit_ours"
        AssertNotExist  "_testing/.commit_theirs"
    DeleteFolder  "_testing"
}

function  Test_Pull_Conflict() {
    echo  ""
    echo  "### Test_Pull_Conflict --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    echo ".DS_Store"   >> "_testing/.gitignore"
    mkdir -p "_testing/build"
    mkdir -p "_testing/_repository/build"

    echo "x" > "_testing/build/out"
    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"
    echo "in work" > "_testing/build/ignore.txt"  #// ignore test case

    cp  "_testing/.gitignore"  "_testing/_repository/.gitignore"
    echo "a"      > "_testing/_repository/example.txt"
    echo "b"     >> "_testing/_repository/example.txt"
    echo "c new" >> "_testing/_repository/example.txt"
    echo "in rep" > "_testing/_repository/build/ignore.txt"  #// ignore test case

    pushd "_testing/_repository" > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    git add "." > /dev/null
    git commit -m "1st" > /dev/null
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    popd > /dev/null

    #// pull command
        pushd "_testing" > /dev/null

        echo  "$ locommit"
        "../${LocommitCommand}"  ||  TestError

        echo "a"             > "example.txt"
        echo "b"            >> "example.txt"
        echo "c conflicted" >> "example.txt"

        echo  "$ locommit"
        "../${LocommitCommand}"  ||  TestError

        echo  "$ locommit pull _repository"
        "../${LocommitCommand}" pull "_repository"
        local  exitCode=$?
        popd > /dev/null
        if [ "${exitCode}" != "0" ]; then
            TestError  "Failed"
        fi

        #// Check conflict status
        AssertContents  "_testing/.commit/example.txt"  'a\nb\nc\n'
        AssertContents  "_testing/.commit_ours/example.txt"  'a\nb\nc conflicted\n'
        AssertContents  "_testing/.commit_theirs/example.txt"   'a\nb\nc new\n'
        grep  "<<<<<<<"  "_testing/example.txt"  > /dev/null  ||  TestError  #// Expected confilcts
        local  result="$(cd _testing  &&  git status --short)"
        echo "${result}" | grep "^UU example.txt$"  > /dev/null  ||  TestError  #// Expected both modified
        AssertExist     "_testing/.commit_ours"
        AssertExist     "_testing/.commit_theirs"
        AssertNotExist  "_testing/.commit_new"
        AssertNotExist  "_testing/.commit_theirs/build/ignore.txt"

    #// Still conflicted (locommit command)
        pushd "_testing" > /dev/null
            echo  "$ locommit"
            "../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        AssertContents  "_testing/example.txt"  'a\nb\n<<<<<<< HEAD\nc conflicted\n=======\nc new\n>>>>>>> __locommit_commit_theirs\n'
        AssertExist  "_testing/.commit_ours"
        AssertExist  "_testing/.commit_theirs"
        AssertExist  "_testing/.commit_new"

    #// Resolve conflicts (locommit command)
        pushd "_testing" > /dev/null
            echo "a"         > "example.txt"
            echo "b"        >> "example.txt"
            echo "c merged" >> "example.txt"
            echo  "Resolved."

            echo  "$ locommit"
            "../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        AssertContents  "_testing/example.txt"  'a\nb\nc merged\n'
        AssertExist  "_testing/.commit_ours"
        AssertExist  "_testing/.commit_theirs"
        AssertExist  "_testing/.commit_new"
        AssertContents  "_testing/build/ignore.txt"  "in work"
 
    #// push command
        pushd "_testing" > /dev/null
            echo  "$ locommit push _repository"
            "../${LocommitCommand}" push "_repository" ||  TestError
        popd > /dev/null

        AssertContents  "_testing/_repository/example.txt"  'a\nb\nc merged\n'
        AssertContents  "_testing/_repository/build/ignore.txt"  "in rep"
        AssertNotExist  "_testing/.commit_ours"
        AssertNotExist  "_testing/.commit_theirs"
        AssertNotExist  "_testing/.commit_new"
    DeleteFolder  "_testing"
}

function  Test_Pull_IgnoreInRepository() {  #// Base test is "Test_Pull_1"
    echo  ""
    echo  "### Test_Pull_IgnoreInRepository --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing/working"
    echo ".commit"      > "_testing/working/.gitignore"
    echo ".commit_*"   >> "_testing/working/.gitignore"
    echo "_repository" >> "_testing/working/.gitignore"
    echo "build"       >> "_testing/working/.gitignore"
    mkdir -p "_testing/working/build"

    echo "x"  > "_testing/working/build/out"
    echo "a"  > "_testing/working/example.txt"
    echo "b" >> "_testing/working/example.txt"
    echo "c" >> "_testing/working/example.txt"

    mkdir -p "_testing/_repository/build"
    cp  "_testing/working/.gitignore"  "_testing/_repository/.gitignore"
    echo "a"      > "_testing/_repository/example.txt"
    echo "b"     >> "_testing/_repository/example.txt"
    echo "c new" >> "_testing/_repository/example.txt"
    echo "in rep" > "_testing/_repository/build/ignore.txt"  #// Main test file

    #// pull command
    pushd "_testing/working" > /dev/null

    echo  "$ locommit"
    "../../${LocommitCommand}"  ||  TestError

    echo  "$ locommit pull _repository"
    "../../${LocommitCommand}" pull "../_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/working/example.txt"  'a\nb\nc new\n'
    AssertExist     "_testing/working/.commit_ours"
    AssertExist     "_testing/working/.commit_theirs"
    AssertNotExist  "_testing/working/.commit_new"
    AssertExist     "_testing/working/.commit"
    AssertNotExist  "_testing/working/.commit_theirs/build"

    #// push command
    pushd "_testing/working" > /dev/null
    echo  "$ locommit"
    "../../${LocommitCommand}"  ||  TestError
    popd > /dev/null

    AssertExist  "_testing/working/.commit_new"

    pushd "_testing/working" > /dev/null
    echo  "$ locommit push _repository"
    "../../${LocommitCommand}" push "../_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/_repository/example.txt"  'a\nb\nc new\n'
    AssertContents  "_testing/_repository/build/ignore.txt"  "in rep"
    AssertNotExist  "_testing/working/.commit_ours"
    AssertNotExist  "_testing/working/.commit_theirs"
    AssertNotExist  "_testing/working/.commit_new"
    DeleteFolder  "_testing"
}

function  Test_Pull_Push_InWorkingSubDirectory() {
    echo  ""
    echo  "### Test_Pull_Push_InWorkingSubDirectory --------------------------------"

    #// Set up
        DeleteFolder  "_testing"

        mkdir -p "_testing"
        pushd  "_testing"  > /dev/null
        StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
        GitInit
        AssertExist  ".git"
        echo ".commit"       > ".gitignore"
        echo ".commit_*"    >> ".gitignore"
        echo "/example.txt" >> ".gitignore"
        EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"

        mkdir -p "project"
        pushd  "project"  > /dev/null
        echo "1" > "example.txt"
        git add ".."
        git commit -m "1st"  > /dev/null
        echo "2" > "example.txt"

        #// Set up a modified git state
        local  result=$( git status --short )
        if [ "${result}" != "$( echo -e ' M example.txt\n' )" ]; then
            TestError
        fi
        popd  > /dev/null
        popd  > /dev/null

    #// locommit command
    pushd  "_testing/project"  > /dev/null
    echo  "$ locommit"
    "../../${LocommitCommand}"  ||  TestError
    echo  "$ locommit"  #// 2nd executing
    "../../${LocommitCommand}"  ||  TestError
    popd  > /dev/null
    AssertExist     "_testing/project/.commit"
    AssertNotExist  "_testing/project/.commit_new"

    #// pull command
    mkdir -p   "_testing/repository"
    echo "r" > "_testing/repository/example.txt"
    pushd  "_testing/project"  > /dev/null

    echo  "$ locommit pull ../repository"
    "../../${LocommitCommand}" pull "../repository"  ||  TestError
    popd  > /dev/null
    AssertContents  "_testing/project/.commit/example.txt"  '2\n'
    AssertContents  "_testing/project/.commit_ours/example.txt"  '2\n'
    AssertContents  "_testing/project/.commit_theirs/example.txt"   'r\n'
    DeleteFolder  "_testing"
}

function  Test_Pull_Push_TargetInWorkingDirectory() {
    echo ""
    echo "### Test_Pull_Push_TargetInWorkingDirectory --------------------------------"

    #// Set up
    DeleteFolder  "_testing"

    mkdir -p "_testing/_repository"
    pushd  "_testing/_repository"  > /dev/null
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    GitInit
    AssertExist  ".git"
    echo  ".commit"      > ".gitignore"
    echo  ".commit_*"   >> ".gitignore"
    echo  "_repository" >> ".gitignore"
    echo  "a"  > "example.txt"
    echo  "b" >> "example.txt"
    echo  "c" >> "example.txt"
    git add "."  > /dev/null
    git commit -m "First commit."  > /dev/null
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    popd  > /dev/null
    AssertExist  "_testing/_repository/example.txt"

    pushd  "_testing"  > /dev/null
    CopyFolder  "_repository"  "."
    popd  > /dev/null
    AssertExist  "_testing/example.txt"

    #// Error of making new ".commit" folder, if ".git" folder exists
    pushd  "_testing"  > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  &&  TestError
    popd  > /dev/null
    AssertNotExist  "_testing/.commit"

    #// Make a ".commit" folder
    pushd  "_testing"  > /dev/null
    echo  "$ rm -rf .git"
    DeleteFolder  ".git"
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd  > /dev/null
    AssertExist  "_testing/.commit"

    #// Add a commit in reposiroty
    pushd  "_testing/_repository"  > /dev/null
    echo  "[_reporitory]$ git commit"
    echo  "a"      > "example.txt"
    echo  "b"     >> "example.txt"
    echo  "c new" >> "example.txt"
    git add "."  > /dev/null
    git commit -m "Second commit."  > /dev/null
    popd  > /dev/null

    #// Make ".commit_new" folder
    pushd  "_testing"  > /dev/null
    echo  "$ edit"
    echo  "a new"  > "example.txt"
    echo  "b"     >> "example.txt"
    echo  "c"     >> "example.txt"
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd  > /dev/null
    AssertExist  "_testing/.commit_new"

    #// Pull command
    pushd  "_testing"  > /dev/null
    echo  "$ locommit pull _repository"
    "../${LocommitCommand}" pull  "_repository"  ||  TestError
    popd  > /dev/null
    AssertContents  "_testing/.commit_ours/example.txt"  'a new\nb\nc\n'
    AssertContents  "_testing/.commit_theirs/example.txt"  'a\nb\nc new\n'
    AssertContents  "_testing/example.txt"  'a new\nb\nc new\n'
    AssertNotExist  "_testing/.commit_new"

    #// Make ".commit" folder
    pushd  "_testing"  > /dev/null
    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd  > /dev/null
    AssertContents  "_testing/.commit_ours/example.txt"  'a new\nb\nc\n'
    AssertContents  "_testing/.commit_theirs/example.txt"  'a\nb\nc new\n'
    AssertContents  "_testing/example.txt"  'a new\nb\nc new\n'
    AssertContents  "_testing/.commit_new/example.txt"  'a new\nb\nc new\n'

    #// Push command
    pushd  "_testing"  > /dev/null
    echo  "$ locommit push _repository"
    "../${LocommitCommand}" push  "_repository"  ||  TestError
    popd  > /dev/null
    AssertNotExist  "_testing/.commit_ours"
    AssertNotExist  "_testing/.commit_theirs"
    AssertNotExist  "_testing/.commit_new"

    #// Check if the reporitory is not added a commit
    local  result="$(cd _testing/_repository  &&  git diff)"
    echo  "${result}" | grep "\-a"      > /dev/null  ||  TestError
    echo  "${result}" | grep  "+a new"  > /dev/null  ||  TestError
    DeleteFolder  "_testing"
}

function  Test_Clone_Pull_Push_Zip() {
    echo ""
    echo "### Test_Clone_Pull_Push_Zip --------------------------------"
    DeleteFolder  "_testing"

    #// Set up
    mkdir -p  "_testing/repository"
    echo "x" > "_testing/repository/example1.txt"
    echo "y" > "_testing/repository/example2.txt"

    #// Main: clone
    echo  "$ locommit clone --zip-commit  _testing/repository  _testing/work"

    "${LocommitCommand}" clone --zip-commit  "_testing/repository/"  "_testing/work"  ||  Error
    AssertExist     "_testing/work/example1.txt"
    AssertExist     "_testing/work/example2.txt"
    AssertNotExist  "_testing/work/.commit"
    AssertExist     "_testing/work/.commit.zip"
    pushd "_testing/work" > /dev/null
    unzip  ".commit.zip"  > /dev/null
    popd > /dev/null
    AssertContents     "_testing/work/.commit/example1.txt"  "x"
    AssertContents     "_testing/work/.commit/example2.txt"  "y"
    AssertNotReadOnly  "_testing/work/.commit/example1.txt"
    AssertNotReadOnly  "_testing/work/.commit/example2.txt"
    rm -f  "_testing/work/.commit"

    #// Set up
    echo "x updated" > "_testing/repository/example1.txt"
    echo "y updated" > "_testing/work/example2.txt"

    #// Main: error in pull command
    mkdir  "_testing/work/.commit"
    pushd "_testing/work" > /dev/null
    echo  "$ locommit pull  ../repository"

    "../../${LocommitCommand}" pull  "../repository"  &&  Error
    popd > /dev/null
    AssertContents  "_testing/work/example1.txt"  "x"

    #// Main: pull
    DeleteFolder  "_testing/work/.commit"
    pushd "_testing/work" > /dev/null
    echo  "$ locommit pull  ../repository"

    "../../${LocommitCommand}" pull  "../repository"  ||  Error
    popd > /dev/null
    AssertContents  "_testing/work/example1.txt"  "x updated"
    AssertNotExist  "_testing/work/.commit"

    #// Set up
    pushd "_testing/work" > /dev/null
    echo  "$ locommit"
    "../../${LocommitCommand}"  ||  Error
    popd > /dev/null

    #// Main: push
    AssertNotExist  "_testing/work/.commit"
    pushd "_testing/work" > /dev/null
    echo  "$ locommit push  ../repository"

    "../../${LocommitCommand}" push  "../repository"  ||  Error
    popd > /dev/null
    AssertContents  "_testing/repository/example2.txt"  "y updated"
    AssertNotExist  "_testing/repository/.commit"
    AssertNotExist  "_testing/repository/.commit_new"
    AssertNotExist  "_testing/work/.commit"
    AssertNotExist  "_testing/work/.commit_new"
    pushd "_testing/work" > /dev/null
    unzip  ".commit.zip"
    popd > /dev/null
    AssertContents     "_testing/work/.commit/example1.txt"  "x updated"
    AssertContents     "_testing/work/.commit/example2.txt"  "y updated"
    AssertNotReadOnly  "_testing/work/.commit/example1.txt"
    AssertNotReadOnly  "_testing/work/.commit/example2.txt"
    rm -rf  "_testing/work/.commit"

    #// Main: 2nd push, no update
    pushd "_testing/work" > /dev/null
    "../../${LocommitCommand}" push  "../repository"  ||  Error
    popd > /dev/null
    DeleteFolder  "_testing"
}

function  Test_PullBase_1() {  #// Base test is "Test_Pull_1"
    echo ""
    echo "### Test_PullBase_1 --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    mkdir -p "_testing/build"
    mkdir -p "_testing/_base"

    echo "x"      > "_testing/build/out"
    echo "a"      > "_testing/example.txt"
    echo "b"      > "_testing/_base/base_update.txt"
    echo "w"      > "_testing/_base/work_update.txt"
    AssertNotExist  "_testing/_base/_base/work_update.txt"
    echo "b"      > "_testing/base_update.txt"
    echo "w"      > "_testing/work_update.txt"

    mkdir -p "_testing/_repository/_base"
    echo "b new"  > "_testing/_repository/base_update.txt"
    echo "w"      > "_testing/_repository/work_update.txt"
    echo "b old"  > "_testing/_repository/_base/base_update.txt"
    echo "w old"  > "_testing/_repository/_base/work_update.txt"

    #// pull command
    pushd "_testing" > /dev/null

    echo  "$ locommit    #// make a .commit folder"
    "../${LocommitCommand}"  ||  TestError

    echo  "$ edit  work_update.txt"
    echo  "w new"  > "work_update.txt"

    echo  "$ locommit pull-base _base _repository"
    "../${LocommitCommand}" pull-base  "_base"  "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a'
    AssertContents  "_testing/base_update.txt"  'b new'
    AssertContents  "_testing/work_update.txt"  'w new'
    AssertContents  "_testing/_base/base_update.txt"  'b new'
    AssertContents  "_testing/_base/work_update.txt"  'w'
    AssertExist     "_testing/.commit_old_ours"
    AssertExist     "_testing/.commit_old_base"
    AssertExist     "_testing/_base"
    AssertNotExist  "_testing/.commit_new"
    AssertExist     "_testing/.commit"
    DeleteFolder  "_testing"
}

function  Test_PullBase_NoInput() {  #// Base tests are "Test_PullBase_1" and "Test_Pull_NoInput"
    echo  ""
    echo  "### Test_PullBase_NoInput --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    mkdir -p "_testing/build"
    mkdir -p "_testing/_base"

    echo "x"      > "_testing/build/out"
    echo "a"      > "_testing/example.txt"
    echo "b"      > "_testing/_base/base_no_update.txt"
    echo "w"      > "_testing/_base/work_update.txt"
    AssertNotExist  "_testing/_base/_base/work_update.txt"
    echo "b"      > "_testing/base_no_update.txt"
    echo "w"      > "_testing/work_update.txt"

    mkdir -p "_testing/_repository/_base"
    echo "b"      > "_testing/_repository/base_no_update.txt"
    echo "w"      > "_testing/_repository/work_update.txt"
    echo "b old"  > "_testing/_repository/_base/base_update.txt"
    echo "w old"  > "_testing/_repository/_base/work_update.txt"

    #// pull command
    pushd "_testing" > /dev/null

    echo  "$ locommit    #// make a .commit folder"
    "../${LocommitCommand}"  ||  TestError

    echo  "$ edit  work_update.txt"
    echo  "w new"  > "work_update.txt"

    echo  "$ locommit pull-base _base _repository"
    "../${LocommitCommand}" pull-base  "_base"  "_repository"
    local  exitCode=$?
    local  branches="$( git branch )"
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"  'a'
    AssertContents  "_testing/base_no_update.txt"  'b'
    AssertContents  "_testing/work_update.txt"  'w new'
    AssertContents  "_testing/_base/base_no_update.txt"  'b'
    AssertContents  "_testing/_base/work_update.txt"  'w'
    AssertNotExist  "_testing/.commit_old_ours"
    AssertNotExist  "_testing/.commit_old_base"
    AssertContents  "_testing/.commit_new/work_update.txt"  'w new'
    echo "${branches}" | grep " __locommit_commit_theirs$"  &&  TestError

    #// second pull command (It requests no error)
    pushd "_testing" > /dev/null

    echo  "$ locommit pull-base _base _repository"
    "../${LocommitCommand}" pull-base  "_base"  "_repository"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    DeleteFolder  "_testing"
}

function  GitInit() {
    git init ${GitInitOption}  > /dev/null  2>&1  ||  Error
    git config --local user.email "${LocommitEMail}"
    git config --local user.name  "${LocommitUser}"
    git config --local core.fileMode  false
}

function  Test_PullBase_Conflict() {  #// Base tests are "Test_PullBase_1" and "Test_Pull_Conflict"
    echo  ""
    echo  "### Test_PullBase_Conflict --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    echo ".DS_Store"   >> "_testing/.gitignore"
    mkdir -p "_testing/build"
    mkdir -p "_testing/_base2"
    mkdir -p "_testing/_repository/build"

    echo "x" > "_testing/build/out"
    echo "a"       > "_testing/example.txt"
    echo "b"       > "_testing/_base2/both_update.txt"
    echo "b now"   > "_testing/both_update.txt"
    echo "in work" > "_testing/build/ignore.txt"  #// ignore test case

    echo "in rep"  > "_testing/_repository/both_update.txt"
    echo "in rep"  > "_testing/_repository/build/ignore.txt"  #// ignore test case

    #// pull command
        pushd "_testing" > /dev/null

        echo  "$ locommit    #// make a .commit folder"
        "../${LocommitCommand}"  ||  TestError

        echo  "$ edit  both_update.txt"
        echo  "in work"  > "both_update.txt"

        echo  "$ locommit pull-base _base2 _repository"
        "../${LocommitCommand}" pull-base  "_base2"  "_repository"
        local  exitCode=$?
        popd > /dev/null
        if [ "${exitCode}" != "0" ]; then
            TestError  "Failed"
        fi

    #// Check conflict status
        AssertContents  "_testing/.commit/example.txt"  'a'
        AssertContents  "_testing/.commit_old_ours/both_update.txt"  'in work'
        AssertContents  "_testing/.commit_old_base/both_update.txt"  'b'
        AssertContents  "_testing/_base2/both_update.txt"  'in rep'
        grep  "<<<<<<<"  "_testing/both_update.txt"  > /dev/null  ||  TestError  #// Expected confilcts
        local  result="$(cd _testing  &&  git status --short)"
        echo "${result}" | grep "^UU both_update.txt$"  > /dev/null  ||  TestError  #// Expected both modified
        AssertExist     "_testing/.commit_old_ours"
        AssertExist     "_testing/.commit_old_base"
        AssertNotExist  "_testing/.commit_new"
        AssertNotExist  "_testing/_base2/build/ignore.txt"
        AssertExist     "_testing/build/ignore.txt"

    #// Still conflicted (locommit command)
        pushd "_testing" > /dev/null
            echo  "$ locommit"
            "../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        AssertContents  "_testing/both_update.txt"  '<<<<<<< HEAD\nin work\n=======\nin rep\n>>>>>>> __locommit_commit_theirs\n'
        AssertExist  "_testing/.commit_old_ours"
        AssertExist  "_testing/.commit_old_base"
        AssertExist  "_testing/.commit_new"

    #// Resolve conflicts (locommit command)
        pushd "_testing" > /dev/null
            echo "merged"  > "both_update.txt"
            echo  "Resolved."

            echo  "$ locommit"
            "../${LocommitCommand}"  ||  TestError
        popd > /dev/null

        AssertContents  "_testing/both_update.txt"  'merged'
        AssertContents  "_testing/_base2/both_update.txt"  "in rep"
        AssertExist  "_testing/.commit_old_ours"
        AssertExist  "_testing/.commit_old_base"
        AssertExist  "_testing/.commit_new"
        AssertContents  "_testing/build/ignore.txt"  "in work"

    #// push command
        pushd "_testing" > /dev/null
            mkdir -p  "_my_repository"
            echo  "$ locommit push _my_repository"
            "../${LocommitCommand}" push  "_my_repository"  ||  TestError
        popd > /dev/null

        AssertContents  "_testing/both_update.txt"  'merged'
        AssertContents  "_testing/.commit/both_update.txt"  'merged'
        AssertContents  "_testing/_my_repository/both_update.txt"  'merged'
        AssertContents  "_testing/_my_repository/_base2/both_update.txt"  "in rep"
        AssertNotExist  "_testing/.commit_old_ours"
        AssertNotExist  "_testing/.commit_old_base"
        AssertNotExist  "_testing/.commit_new"
    DeleteFolder  "_testing"
}

function  Test_Pull_Push_File_1() {
    echo  ""
    echo  "### Test_Pull_Push_File_1 --------------------------------"

    #// Set up
    DeleteFolder  "_testing"
    mkdir -p "_testing"
    echo  "# ignore except one file"  >  "_testing/.gitignore"
    echo  "*"             >>  "_testing/.gitignore"
    echo  "!example.txt"  >>  "_testing/.gitignore"
    echo "a"  > "_testing/example.txt"
    echo "b" >> "_testing/example.txt"
    echo "c" >> "_testing/example.txt"

    mkdir -p "_testing/_repository"
    echo "a"      > "_testing/_repository/example.txt"
    echo "b"     >> "_testing/_repository/example.txt"
    echo "c new" >> "_testing/_repository/example.txt"
    echo "n"     >> "_testing/_repository/not_used_theirs.txt"

    #// pull command
    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError

    echo  "$ locommit pull  _repository  --file  example.txt"
    "../${LocommitCommand}" pull "_repository"  --file  "example.txt"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"          'a\nb\nc new\n'
    AssertContents  "_testing/.commit/example.txt"  'a\nb\nc\n'
    AssertNotExist  "_testing/not_used.txt"
    AssertNotExist  "_testing/.commit_ours/example.txt"
    AssertNotExist  "_testing/.commit_theirs/example.txt"
    AssertNotExist  "_testing/.commit_new/example.txt"

    #// Case of pull command conflict
    SetNotReadOnly    "_testing/.commit/example.txt"
    echo "new work" > "_testing/example.txt"
    echo "old"      > "_testing/.commit/example.txt"
    echo "new rep"  > "_testing/_repository/example.txt"

    #// pull command
    pushd "_testing" > /dev/null

    echo  "$ locommit pull  _repository  --file  example.txt"
    "../${LocommitCommand}" pull "_repository"  --file  "example.txt"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"                 "<<<<<<< HEAD\nnew work\n=======\nnew rep\n>>>>>>> __locommit_commit_theirs"
    AssertExist     "_testing/.commit/example.txt"         "old"
    AssertContents  "_testing/.commit_ours/example.txt"    "new work"
    AssertContents  "_testing/.commit_theirs/example.txt"  "new rep"
    AssertNotExist  "_testing/.commit_new/example.txt"

    #// Resolve conflict
    echo "updated" > "_testing/example.txt"

    #// push command
    pushd "_testing" > /dev/null

    echo  "$ locommit"
    "../${LocommitCommand}"  ||  TestError
    popd > /dev/null
    AssertExist  "_testing/.commit_new"

    pushd "_testing" > /dev/null
    echo  "n"  >  "not_used_ours.txt"
    echo  "$ locommit push _repository/example.txt"

    "../${LocommitCommand}" push "_repository"  --file  "example.txt"
    local  exitCode=$?
    popd > /dev/null
    if [ "${exitCode}" != "0" ]; then
        TestError  "Failed"
    fi
    AssertContents  "_testing/example.txt"              "updated"
    AssertContents  "_testing/.commit/example.txt"      "updated"
    AssertContents  "_testing/_repository/example.txt"  "updated"
    AssertNotExist  "_testing/_repository/not_used_ours.txt"
    AssertNotExist  "_testing/.commit_ours/example.txt"
    AssertNotExist  "_testing/.commit_theirs/example.txt"
    AssertNotExist  "_testing/.commit_new/example.txt"
    DeleteFolder  "_testing"
}

function  Test_InitBarePush_OutOfGitWorking() {
    echo  ""
    echo  "### Test_InitBarePush_OutOfGitWorking --------------------------------"
    Test_InitBarePush_Sub  "out"  "--branch  develop"  "develop"
}

function  Test_InitBarePush_InGitWorking() {
    echo  ""
    echo  "### Test_InitBarePush_InGitWorking --------------------------------"
    Test_InitBarePush_Sub  "in"  ""  "feature"
}

function  Test_InitBarePush_Sub() {
    local  gitWorking="$1"
    local  branchOption="$2"
    local  expectedBranch="$3"
    DeleteFolder  "_testing"
    DeleteFolder  "_repository"
    DeleteFolder  "_working"
    DeleteFolder  ".commit_init-bare-push"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/example.txt"
    echo "build"      > "_testing/.gitignore"
    echo ".commit"   >> "_testing/.gitignore"
    echo ".commit_*" >> "_testing/.gitignore"
    if [ "${gitWorking}" == "in" ]; then
        pushd  "_testing"  >  /dev/null
        StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
        GitInit
        git checkout -b  "${expectedBranch}"
        git add "."  > /dev/null  2>&1
        git commit  -m "test-locommit)"  > /dev/null  2>&1
        EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
        popd  >  /dev/null

        echo "updated" > "_testing/example.txt"
    fi

    #// Test of too few parameters error
    pushd "_testing" > /dev/null
    "../${LocommitCommand}" init-bare-push   &&  TestError
    popd > /dev/null

    #// Test Main
    pushd "_testing" > /dev/null

    "../${LocommitCommand}" init-bare-push  ../_repository  ${branchOption}  ||  TestError
    popd > /dev/null

    AssertNotExist  "_testing/.commit_init-bare-push"
    AssertExist     "_repository"
    StartInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    git clone  "file://${PWD}/_repository"  "_working"
    EndInTemporary  "LOCOMMIT_TMP"  "${LOCOMMIT_TMP}"
    AssertExist     "_working/example.txt"
    AssertExist     "_working/.gitignore"
    AssertNotExist  "_working/build"
    AssertNotExist  "_working/build/out"
    AssertExist     "_working/.git"
    if [ "${gitWorking}" == "out" ]; then
        test  "$( cat "_working/example.txt" )" == "x"  ||  Error
    elif [ "${gitWorking}" == "in" ]; then
        test  "$( cat "_working/example.txt" )" == "updated"  ||  Error
    else
        Error
    fi
    pushd "_working" > /dev/null
    local  gitBranchOutput="$( git branch )"
    popd > /dev/null
    test  "${gitBranchOutput}" == "* ${expectedBranch}"  ||  Error

    #// Test of already exists
    pushd "_testing" > /dev/null
    "../${LocommitCommand}" init-bare-push  ../_repository  &&  TestError
    popd > /dev/null
    DeleteFolder  "_testing"
    DeleteFolder  "_repository"
    DeleteFolder  "_working"
}

function  MakePushTestFiles() {
    mkdir -p "_testing/build"
    mkdir -p "_testing/_repository/.git"

    echo "x"            > "_testing/build/out"
    echo "x "           > "_testing/example.txt"
    echo ".commit"      > "_testing/.gitignore"
    echo ".commit_*"   >> "_testing/.gitignore"
    echo "build"       >> "_testing/.gitignore"
    echo "_repository" >> "_testing/.gitignore"
    echo "git"          > "_testing/_repository/.git/files"
    echo "old"          > "_testing/_repository/old_files"
}

function  Test_ResolvePath() {
    echo  ""
    echo  "### Test_ResolvePath --------------------------------"
    ResolvePath > /dev/null  #// Set "mnt_c" environmet variable
    if [ "$( ResolvePath "/mnt/c/" )" != "${mnt_c}/" ]; then  TestError;  fi
    if [ "$( ResolvePath "c:/" )"     != "${mnt_c}/" ]; then  TestError;  fi
    if [ "$( ResolvePath "/c/" )"     != "${mnt_c}/" ]; then  TestError;  fi
    if [ "$( ResolvePath "/home" )"   != "/home" ]; then  TestError;  fi
    if [ "$( ResolvePath "relative" )"      != "relative" ]; then  TestError;  fi
    if [ "$( ResolvePath "relative/path" )" != "relative/path" ]; then  TestError;  fi
    if [ "$( ResolvePath "/mnt/c/root-path" )" != "${mnt_c}/root-path" ]; then  TestError;  fi
    if [ "$( ResolvePath 'C:\' )"      != "${mnt_c}/" ]; then  TestError;  fi
    if [ "$( ResolvePath 'C:\Users' )" != "${mnt_c}/Users" ]; then  TestError;  fi
}

function  ResolvePath() {
    local  path_="$1"

    path_="$( echo "${path_}" | sed -e 's/\\/\//g' | sed -e 's/^C:/c:/'  || echo "(ERROR)" )"  #// replace to / and c:
    ErrorIfLastIs  "${path_}"  "(ERROR)"

    if [ "${mnt_c}" == "" ]; then
        export  mnt_c="/mnt/c";  if [ ! -e "/mnt/c" ]; then  export  mnt_c="c:"  ;fi
    fi
    if [ "${path_:0:3}" == "c:/"  -o  "${path_:0:3}" == "/c/" ]; then
        path_="${mnt_c}/${path_:3}"
    elif [ "${path_:0:7}" == "/mnt/c/" ]; then
        path_="${mnt_c}/${path_:7}"
    fi

    echo  "${path_}"
}

function  GetGitWorkingRootPath() {
    local  path="${PWD}"
    while [ "${path}" != "" ]; do

        if [ -e "${path}/.git" ]; then
            echo  "${path}"
            return
        fi
        path="${path%/*}"
    done

    echo  ""
}

function  Test_CopyFolder() {
    echo  ""
    echo  "### Test_CopyFolder --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p   "_testing/source"
    echo "x" > "_testing/source/a"
    echo "x" > "_testing/source/.a"
    echo "x" > "_testing/source/..a"
    mkdir -p   "_testing/source/node_modules/type"
    echo "x" > "_testing/source/node_modules/type/a"
    echo "x" > "_testing/source/node_modules/type/.a"
    echo "x" > "_testing/source/node_modules/type/..a"
    mkdir -p   "_testing/source/.vscode"
    echo "x" > "_testing/source/.vscode/a"
    echo "x" > "_testing/source/.vscode/.a"
    echo "x" > "_testing/source/.vscode/..a"
    mkdir -p   "_testing/source/.git"
    echo "x" > "_testing/source/.git/a"
    echo "x" > "_testing/source/.git/.a"
    echo "x" > "_testing/source/.git/..a"
    mkdir -p   "_testing/source/..d"
    echo "x" > "_testing/source/..d/a"
    echo "x" > "_testing/source/..d/.a"
    echo "x" > "_testing/source/..d/..a"

    CopyFolder  "_testing/source"  "_testing/destination"
    AssertExist  "_testing/destination/a"
    AssertExist  "_testing/destination/.a"
    AssertExist  "_testing/destination/..a"
    AssertExist  "_testing/destination/node_modules/type/a"
    AssertExist  "_testing/destination/node_modules/type/.a"
    AssertExist  "_testing/destination/node_modules/type/..a"
    AssertExist  "_testing/destination/.vscode/a"
    AssertExist  "_testing/destination/.vscode/.a"
    AssertExist  "_testing/destination/.vscode/..a"
    AssertExist  "_testing/destination/.git/a"
    AssertExist  "_testing/destination/.git/.a"
    AssertExist  "_testing/destination/.git/..a"
    AssertExist  "_testing/destination/..d/a"
    AssertExist  "_testing/destination/..d/.a"
    AssertExist  "_testing/destination/..d/..a"
    DeleteFolder  "_testing/destination"

    CopyFolder  "_testing/source"  "_testing/destination"  "--exclude=./.git"
    AssertExist  "_testing/destination/a"
    AssertExist  "_testing/destination/.a"
    AssertExist  "_testing/destination/..a"
    AssertExist  "_testing/destination/node_modules/type/a"
    AssertExist  "_testing/destination/node_modules/type/.a"
    AssertExist  "_testing/destination/node_modules/type/..a"
    AssertExist  "_testing/destination/.vscode/a"
    AssertExist  "_testing/destination/.vscode/.a"
    AssertExist  "_testing/destination/.vscode/..a"
    AssertNotExist  "_testing/destination/.git"
    AssertExist  "_testing/destination/..d/a"
    AssertExist  "_testing/destination/..d/.a"
    AssertExist  "_testing/destination/..d/..a"
    DeleteFolder  "_testing"
}

function  CopyFolder() {
    local  source="$1"
    local  destination="$2"
    local  ignoreDotGit="$3"  #// ${True}, ${False}(default)
    local  excludeOption="--exclude=./.git"
    source="$( CutLastOf  "${source}"  "/" )"
    destination="$( CutLastOf  "${destination}"  "/" )"
    if [ "${ignoreDotGit}" != ""  -a  "${ignoreDotGit}" != "${excludeOption}" ]; then
        TestError  "ERROR: Bad option: ${ignoreDotGit}"
        return  "${False}"
    fi

    mkdir -p  "${destination}/"
    if [ "${ignoreDotGit}" == "${excludeOption}" ]; then
        ls -a "${source}" | grep -v  -e "^\.git$"  -e "^\.$"  -e "^\.\.$" | xargs  -I {} \
            cp -Rap  "${source}/{}"  "${destination}/"
        local  exitCodes="${PIPESTATUS[@]}"
        test "${exitCodes}" == "0 0 0"  ||  Error
    else
        ls -a "${source}" | grep -v  -e "^\.$"  -e "^\.\.$" | xargs  -I {} \
            cp -Rap  "${source}/{}"  "${destination}/"
        local  exitCodes="${PIPESTATUS[@]}"
        test "${exitCodes}" == "0 0 0"  ||  Error
    fi
}

function  Test_DeleteFolder() {
    echo  ""
    echo  "### Test_DeleteFolder --------------------------------"

    mkdir -p  "_testing"
    echo  "readonly" > "_testing/readonly"
    chmod 555 "_testing/readonly"
    DeleteFolder  "_testing"
}

function  DeleteFolder() {
    local  folderPath="$1"
    local  retryCount=3
    if [ ! -e "${folderPath}" ]; then
        return
    fi

    while true; do
        SetNotReadOnly "${folderPath}"  #// For CentOS7 Vagrant shared folder

        rm -rf  "${folderPath}"
        if [ "$?" == 0 ]; then
            return
        fi

        retryCount="$(( ${retryCount} - 1 ))"
        if [ "${retryCount}" == "0" ]; then
            Error  "Cannot delete a folder \"${folderPath}\""
        fi
        echo  "try again ..." >&2
        sleep 2s
    done
}

function  gitInitOption() {
    if [ "$( LessThanVersion "$(git --version)" "2.31.1")" == "${True}" ]; then
        echo  ""
    else
        echo  "-bmain"  #// "-b main" occurs an error in bash debug
    fi
}

function  GitStatusCurrentFolder() {

    local  gitStatus="$( git status --short )"
    local  gitStatusCurrent=""
    local  oldIFS="$IFS"
    IFS=$'\n'
    lines=( ${gitStatus} )
    IFS="$oldIFS"
    for  gitState  in "${lines[@]}"; do

        if [ "${gitState:3:3}" != "../" ]; then
            echo  "${gitState}"
        fi
    done
}

function  Test_LessThanVersion() {
    echo  ""
    echo  "### Test_LessThanVersion --------------------------------"
    if [ "$( LessThanVersion "0.0.0" "0.0.0" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.0.0" "0.0.1" )" != "${True}"  ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.0.0" "0.1.0" )" != "${True}"  ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.0.0" "1.0.0" )" != "${True}"  ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.2.0" "0.1.9" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.1.9" "0.1.9" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "0.1.9" "0.2.0" )" != "${True}"  ]; then  TestError  ;fi
    if [ "$( LessThanVersion "2.11.9" "2.9.11" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "2.9.11" "2.11.9" )" != "${True}"  ]; then  TestError  ;fi
    if [ "$( LessThanVersion "2.0.0" "1.9.9" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "1.9.9" "1.9.9" )" != "${False}" ]; then  TestError  ;fi
    if [ "$( LessThanVersion "1.9.9" "2.0.0" )" != "${True}"  ]; then  TestError  ;fi
}

# LessThanVersion
#     if [ "$( LessThanVersion "$(git --version)" "2.31.1")" == "${True}" ]; then
function  LessThanVersion() {
    local  textContainsVersionA="$1"
    local  textContainsVersionB="$2"
    local  isGoodFormat="${True}"
    echo "${textContainsVersionA}" | grep -e "[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null  ||  isGoodFormat="${False}"
    echo "${textContainsVersionB}" | grep -e "[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null  ||  isGoodFormat="${False}"
    if [ "${isGoodFormat}" == "${False}" ]; then
        Error  "\"${textContainsVersionA}\" or \"${textContainsVersionB}\" is not semantic version."
    fi

    local  numbersA=( $( echo "${textContainsVersionA}" | grep -o -e "[0-9]\+" ) )
    local  numbersB=( $( echo "${textContainsVersionB}" | grep -o -e "[0-9]\+" ) )
    if [ "${numbersA[0]}" -lt "${numbersB[0]}" ]; then
        echo "${True}"
        return
    elif [ "${numbersA[0]}" == "${numbersB[0]}" ]; then
        if [ "${numbersA[1]}" -lt "${numbersB[1]}" ]; then
            echo "${True}"
            return
        elif [ "${numbersA[1]}" == "${numbersB[1]}" ]; then
            if [ "${numbersA[2]}" -lt "${numbersB[2]}" ]; then
                echo "${True}"
                return
            fi
        fi
    fi
    echo "${False}"
}

function  StartInTemporary() {
    local  temporaryPathVariableName="$1"
    local  temporaryPathValue="$2"
    local  currentFolder="${PWD}"

    if IsWindowsFolder  "${currentFolder}"; then
        if [ "${temporaryPathValue}" != "" ]; then
            echo  "Using ${temporaryPathVariableName} (${temporaryPathValue}) because \"${currentFolder}\" is Windows shared folder."
            test  "${temporaryPathValue:0:1}" == "/"  ||  Error  "ERROR: ${temporaryPathVariableName} requests full path. temporaryPath: \"${temporaryPathValue}\""

            RsyncToTemporary  "${currentFolder}"  "${temporaryPathValue}"

            pushd  "${temporaryPathValue}${currentFolder}" > /dev/null  ||  Error
        else
            echo  "${temporaryPathVariableName} environment variable is not set though \"${currentFolder}\" is Windows shared folder."
        fi
    fi
}

function  EndInTemporary() {
    local  temporaryPathVariableName="$1"
    local  temporaryPathValue="$2"
    local  currentFolder="${PWD}"
    if [ "${temporaryPathValue}" == "" ]; then
        return
    fi

    if StartsWith  "${currentFolder}/"  "${temporaryPathValue}/"; then

        RsyncFromTemporary  "${currentFolder}"  "${temporaryPathValue}"

        popd  > /dev/null
    fi
}

function  RsyncToTemporary() {
    local  folderPath="$1"
    local  temporaryPath="$2"
    local  waitTime="$3"  #// "", 0 or 1s.  ""=1s
    if [ "${waitTime}" == "" ]; then
        waitTime="1s"
    fi
    test  "${folderPath:0:1}" == "/"  ||  Error  "ERROR: RsyncToTemporary requests full path. folderPath: \"${folderPath}\""
    test  "${temporaryPath:0:1}" == "/"  ||  Error  "ERROR: RsyncToTemporary requests full path. temporaryPath: \"${temporaryPath}\""
    mkdir -p  "${temporaryPath}${folderPath}"

    rsync --recursive --delete --times  "${folderPath}/"  "${temporaryPath}${folderPath}/"  ||  Error
        #// It is necessary to set "--times" for Windows share folder
    sleep  "${waitTime}"
    return 0
}

function  RsyncFromTemporary() {
    #// Command "RsyncFromTemporary /tmp/folder/to /tmp" copies to /folder/to
    local  folderPathInTemporary="$1"
    local  temporaryPath="$2"
    local  waitTime="$3"  #// "", 0 or 1s.  ""=1s
    if [ "${waitTime}" == "" ]; then
        waitTime="1s"
    fi
    test  "${folderPathInTemporary:0:1}" == "/"  ||  Error  "ERROR: RsyncFromTemporary requests full path. folderPathInTemporary: \"${folderPathInTemporary}\""
    test  "${temporaryPath:0:1}" == "/"  ||  Error  "ERROR: RsyncFromTemporary requests full path. temporaryPath: \"${temporaryPath}\""
    StartsWith  "${folderPathInTemporary}/"  "${temporaryPath}/"  ||  Error

    local  destinationFolderPath="${folderPathInTemporary:${#temporaryPath}}"
    mkdir -p  "${destinationFolderPath}"
    local  readOnlyFiles="$( find "${destinationFolderPath}" -type f ! -perm -u=w )"
    echo  "${readOnlyFiles}"  |  xargs -I{} chmod 777 "{}"  #// For rsync can overwrite files in Windows share folder

    rsync --recursive --delete --times --inplace  "${folderPathInTemporary}/"  "${destinationFolderPath}/"  ||  Error
        #// It is necessary to set "--inplace" for Windows share folder. "--inplace" does not rename in rsync.
    echo  "${readOnlyFiles}"  |  xargs -I{}  sh -c 'test -e "{}"  &&  chmod 444 "{}"'
        #// For not changed read only files in Windows share folder
    sleep  "${waitTime}"
    return 0
}

function  IsWindowsFile() {  #// Shared file with Windows in Linux process
    local  filePath="$1"
    if [ -d "${filePath}" ]; then Error ;fi

    if df -h "${filePath}"  |  grep -E '/dev/' > /dev/null; then  #// Linux file system
        return "${False}"  #// Linux file
    else
        return "${True}"  #// Windows file
    fi
}

function  IsWindowsFile_Bad() {  #// Shared file with Windows in Linux process
    local  filePath="$1"
    if [ -d "${filePath}" ]; then Error ;fi
    local  oldChmod="$( stat --format '%a' "${filePath}" )"

    chmod 444  "${filePath}"
sleep 1s
    local  newChmod="$( stat --format '%a' "${filePath}" )"
    chmod "${oldChmod}"  "${filePath}"
echo "${newChmod}"  #// with sleep 1s: 555, without sleep 1s: 444 ... Bad

    if [ "${newChmod}" == "555" ]; then
        return "${True}"  #// Windows file
    else
        return "${False}"  #// Linux file
    fi
}

function  IsWindowsFolder() {
    local  folderPath="$1"
    echo  "x"  >  "${folderPath}/.commit_tmp"

    IsWindowsFile  "${folderPath}/.commit_tmp"
    local  returnValue=$?
    rm  "${folderPath}/.commit_tmp"
    return  "${returnValue}"
}

function  SetReadOnly() {
    SetReadOnlyOrNot --set-read-only  "$@"
}

function  SetNotReadOnly() {
    SetReadOnlyOrNot --set-not-read-only  "$@"
}

if [ "${READ_ONLY_CHMOD}" == "" ]; then
    READ_ONLY_CHMOD="a-w"   #// For Linux only
fi
if [ "${NOT_READ_ONLY_CHMOD}" == "" ]; then
    NOT_READ_ONLY_CHMOD="u+w"   #// For Linux only
fi

function  SetReadOnlyOrNot() {
    local  operation="$1"
    local  fileOrFolderPath="$2"

    if [ -f "${fileOrFolderPath}" ]; then
        local  filePath="${fileOrFolderPath}"
        if [ "${operation}" == "--set-read-only" ]; then
            if IsWindowsFile "${filePath}"; then

                chmod 444  "${filePath}"
            else
                chmod ${READ_ONLY_CHMOD}  "${filePath}"
            fi
        elif [ "${operation}" == "--set-not-read-only" ]; then
            if IsWindowsFile "${filePath}"; then

                chmod 777  "${filePath}"
            else
                chmod ${NOT_READ_ONLY_CHMOD}  "${filePath}"
            fi
        fi

    elif [ -d "${fileOrFolderPath}" ]; then
        local  folderPath="${fileOrFolderPath}"
        local  filePaths="$( find "${folderPath}"  -type f )"
        local  firstFilePath="$( echo  "${filePaths}"  |  head -1 )"
        if [ "${firstFilePath}" != "" ]; then
            if [ "${operation}" == "--set-read-only" ]; then
                if IsWindowsFile "${firstFilePath}"; then
                    echo  "${filePaths}"  |  xargs -I{} chmod 444 "{}"
                else
                    echo  "${filePaths}"  |  xargs -I{} chmod ${READ_ONLY_CHMOD} "{}"
                fi
            elif [ "${operation}" == "--set-not-read-only" ]; then
                if IsWindowsFile "${firstFilePath}"; then

                    echo  "${filePaths}"  |  xargs -I{} chmod 777 "{}"
                else
                    echo  "${filePaths}"  |  xargs -I{} chmod ${NOT_READ_ONLY_CHMOD} "{}"
                fi
            fi
        fi
    fi
}



function  GetBooleanString() {
    if [ "$1" == "${True}" ]; then
        echo  "True"
    elif [ "$1" == "${False}" ]; then
        echo  "False"
    else
        echo  "$1"
    fi
}

#// StartsWith
#//     e.g.) if StartsWith  ${wholeString} ${partString}; then
function  StartsWith() {
    local  wholeString="$1"
    local  partString="$2"
    local  partLength=${#partString}

    #// Set exit code
    [ "${wholeString:0:${partLength}}" == "${partString}" ]
}

function  Test_CutLastOf() {
    echo  ""
    echo  "### Test_CutLastOf --------------------------------"

    local  result="$(CutLastOf "aba" "a")"
    if [ "${result}" != "ab" ]; then
        TestError  "CutLastOf (1)"
    fi

    local  result="$(CutLastOf "aba" "x")"
    if [ "${result}" != "aba" ]; then
        TestError  "CutLastOf (2)"
    fi

    local  result="$(CutLastOf "abc" "bc")"
    if [ "${result}" != "a" ]; then
        TestError  "CutLastOf (3)"
    fi
}

function  CutLastOf() {
    local  wholeString="$1"
    local  lastExpected="$2"

    if [ "${wholeString:${#wholeString}-${#lastExpected}:${#lastExpected}}" == "${lastExpected}" ]; then
        echo  "${wholeString:0:${#wholeString}-${#lastExpected}}"
    else
        echo  "${wholeString}"
    fi
}

function  Test_ErrorIfLastIs() {
    echo  ""
    echo  "### Test_ErrorIfLastIs --------------------------------"

    local  output="$( Test_Sub1_ErrorIfLastIs )"
    local  answer="$( echo -e 'OK\nstdout\n(ERROR)\n' )"
    if [ "${output}" != "${answer}" ]; then
        Error  "ERROR: in Test_ErrorIfLastIs 1"
    fi

    local  output="$( Test_Sub2_ErrorIfLastIs )"
    local  answer="$( echo -e '(error_symbol) OK\nPass\n' )"
    if [ "${output}" != "${answer}" ]; then
        Error  "ERROR: in Test_ErrorIfLastIs 2"
    fi
}

function  Test_Assert() {
    echo  ""
    echo  "### Test_Assert --------------------------------"
    DeleteFolder  "_testing"
    mkdir -p "_testing/build"
    echo "x" > "_testing/build/out"
    echo "x" > "_testing/build/out X"

    AssertExist  "_testing/build/out"
    AssertNotExist  "_testing/build/not_found"
    AssertInstalled  "cat"

    local  out="$(x="$( 
        AssertExist  "_testing/build/not_found"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi
    local  out="$(x="$( 
        AssertNotExist  "_testing/build/out"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi
    local  out="$(x="$( 
        AssertInstalled  "cats"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    local  out="$(x="$( 
        AssertReadOnly  "_testing/build/out"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    SetReadOnly  "_testing/build/out"
    AssertReadOnly  "_testing/build/out"

    local  out="$(x="$( 
        AssertNotReadOnly  "_testing/build/out"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    SetNotReadOnly  "_testing/build/out"
    AssertNotReadOnly  "_testing/build/out"

    #// contains space
    AssertExist  "_testing/build/out X"
    AssertNotExist  "_testing/build/out not_found"

    local  out="$(x="$( 
        AssertExist  "_testing/build/out not_found"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi
    local  out="$(x="$( 
        AssertNotExist  "_testing/build/out X"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    local  out="$(x="$( 
        AssertReadOnly  "_testing/build/out X"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    SetReadOnly  "_testing/build/out X"
    AssertReadOnly  "_testing/build/out X"

    local  out="$(x="$( 
        AssertNotReadOnly  "_testing/build/out X"
    )" && echo "$x" || echo "(assert failed)" )"
    if [ "${out}" != "(assert failed)" ]; then  Error  ;fi

    SetNotReadOnly  "_testing/build/out X"
    AssertNotReadOnly  "_testing/build/out X"
}

function  AssertExist() {
    local  path="$1"
    local  leftOfWildcard="${path%\**}"
    if [ "${leftOfWildcard}" == "${path}" ]; then  #// No wildcard

        if [ ! -e "${path}" ]; then
            Error  "ERROR: Not found \"${path}\""
        fi
    else
        local  rightOfWildcard="${path##*\*}"
        if [ ! -e "${leftOfWildcard}"*"${rightOfWildcard}" ]; then
            Error  "ERROR: Not found \"${path}\""
        fi
    fi
}

function  AssertNotExist() {
    local  path="$1"

    if [ -e "${path}" ]; then
        Error  "ERROR: Found \"${path}\""
    fi
}

function  AssertReadOnly() {
    local  path="$1"
    local  writable=${False}

    local  attributes="$(ls -la "${path}")"
    echo "${attributes:0:10}" | grep w  > /dev/null  &&  writable=${True}

    if [ "${writable}" == "${True}" ]; then
        Error  "ERROR: Not read only file \"${path}\""
    fi
}

function  AssertNotReadOnly() {
    local  path="$1"
    local  writable=${False}

    local  attributes="$(ls -la "${path}")"
    echo "${attributes:0:10}" | grep w  > /dev/null  &&  writable=${True}

    if [ "${writable}" == "${False}" ]; then
        Error  "ERROR: Read only file \"${path}\""
    fi
}

function  AssertInstalled() {
    local  checkingCommand="$1"
    local  exists=${False}
    which "${checkingCommand}" > /dev/null  &&  exists=${True}

    if [ "${exists}" == ${False} ]; then
        Error  "ERROR: Not installed \"${checkingCommand}\" command"
    fi
}

function  AssertContents() {
    local  filePath="$1"
    local  expectedContents="$2"

    local  result="$(cat "${filePath}")"
    if [ "${result}" != "$( echo -e "${expectedContents}" )" ]; then
        Error  "ERROR: Not expected contents in ${filePath}: ${result}"
    fi
}

function  Test_Sub1_ErrorIfLastIs() {
    local  output=""

    output="$( echo "OK" || echo "(ERROR)" )"
    echo  "${output}"
    ErrorIfLastIs  "${output}"  "(ERROR)"

    output="$( TestReturn1 || echo "(ERROR)" )"
    echo  "${output}"
    ErrorIfLastIs  "${output}"  "(ERROR)"

    echo  "not reach here"
}

function  Test_Sub2_ErrorIfLastIs() {
    local  output=""

    output="$( echo "(error_symbol) OK" || echo "(error_symbol)" )"
    echo  "${output}"
    ErrorIfLastIs  "${output}"  "(error_symbol)"

    echo  "Pass"
}

function  TestReturn1()
{
    echo  "stdout"
	return  1
}

# ErrorIfLastIs
#     Error check in $( )
#     variable="$( command  || echo "(ERROR)" )"
#     ErrorIfLastIs  "${output}"  "(ERROR)"
function  ErrorIfLastIs() {
    local  output="$1"
    local  tag="$2"

    local  last="${output:${#output}-${#tag}:${#tag}}"

    if [ "${last}" == "${tag}" ]; then
        exit  2
    fi
}

function  Test_Error() {
    echo  ""
    echo  "### Test_Error --------------------------------"
    local  currentErrorCount="${ErrorCount}"

    #// Test
    TestError  "Test_Error"
    if [ ${ErrorCount} == ${currentErrorCount} ]; then
        echo  "Error: in Error"
        exit  1
    fi
    ErrorCount="${currentErrorCount}"

    #// Test
    currentErrorCount="${ErrorCount}"
    StartErrorTest
    EndErrorTest  "Test of no error error"
    if [ ${ErrorCount} == ${currentErrorCount} ]; then
        echo  "Error: test 1 in StartErrorTest or EndErrorTest"
        exit  1
    fi
    ErrorCount="${currentErrorCount}"

    #// Test
    currentErrorCount="${ErrorCount}"
    StartErrorTest
    TestError  "Test of StartErrorTest (2)"
    EndErrorTest  "Test of StartErrorTest (2)"
    if [ ${ErrorCount} != ${currentErrorCount} ]; then
        echo  "Error: test 2 in StartErrorTest or EndErrorTest"
        exit  1
    fi
    ErrorCount="${currentErrorCount}"

    echo  "Passed Test_Error."
}

function  StartErrorTest() {
    ErrorCountBeforeStart=${ErrorCount}
}
NotInErrorTest=-1
ErrorCountBeforeStart=${NotInErrorTest}

function  EndErrorTest() {
    local  expectedErrorMessage="$1"
    local  errorCountBeforeStart="${ErrorCountBeforeStart}"
    ErrorCountBeforeStart="${NotInErrorTest}"

    if [ "${ErrorCount}" == "${errorCountBeforeStart}" ]; then
        if [ "${expectedErrorMessage}" == "" ]; then
            TestError  "ERROR: EndErrorTest has no parameter"
        else
            TestError  "ERROR: Expected an error of \"${expectedErrorMessage}\" but no error"
        fi
    elif [ "${expectedErrorMessage}" != "${LastErrorMessage}" ]; then
        if [ "${expectedErrorMessage}" == "" ]; then
            TestError  "ERROR: EndErrorTest has no parameter. \"${LastErrorMessage}\" error was occurred"
        else
            TestError  "ERROR: Expected an error of \"${expectedErrorMessage}\" but \"${LastErrorMessage}\""
        fi
    else
        ErrorCount="${errorCountBeforeStart}"
    fi
}

# ExitIfMatched
#     Check exit code and return code in $( ). If checking was failed, do "exit" command.
# Example:
#     local  out="$(x="$( command )" && echo "$x" || echo "(ERROR:$?)" )"
#     ExitIfMatched  "${out}"  '^\(ERROR:([0-9]*)\)$'
function  ExitIfMatched() {
    local  output="$1"
    local  regularExpression="$2"

    if [[ "${output}" =~ ${regularExpression} ]]; then
        local  exitCode="$( echo "${output}"  |  sed -E  's/'"${regularExpression}"'/\1/')"
        exit  "${exitCode}"
    fi
}

function  TestError() {
    local  errorMessage="$1"
    if [ "${errorMessage}" == "" ]; then
        errorMessage="a test error"
    fi
    if [ "${ErrorCountBeforeStart}" == "${NotInErrorTest}" ]; then

        echo  "TEST ERROR: ${errorMessage}"
    fi
    LastErrorMessage="${errorMessage}"
    ErrorCount=$(( ${ErrorCount} + 1 ))
}
ErrorCount=0
LastErrorMessage=""

function  Error() {
    local  errorMessage="$1"
    local  exitCode="$2"
    if [ "${errorMessage}" == "" ]; then
        errorMessage="ERROR"
    fi
    if [ "${exitCode}" == "" ]; then  exitCode=2  ;fi

    echo  "${errorMessage}" >&2
    exit  "${exitCode}"
}

function  EndOfTest() {
    echo  ""
    echo  "ErrorCount: ${ErrorCount}"
    if [ "${ErrorCount}" == "0" ]; then
        echo  "Pass."
        local  message="Environment ${TestEnvironmentNum}:"
        message="${message} IsGitWorking = $( GetBooleanString ${IsGitWorking} ),"
        message="${message} InGitWorking = $( GetBooleanString ${InGitWorking} )."
        echo  "${message}"
        if [ "${WINDIR}" != "" ]; then  #// Windows
            echo  "Also, you must test other environments. All environment numbers are 1,2,3."
        else  #// Linux
            echo  "Also, you must test other environments. All environment numbers are 1,2,3,4."
        fi
    fi
}

function  DetectTestEnvironment() {
    local  gitWorkingRootPath="$( GetGitWorkingRootPath )"
    if [ "${gitWorkingRootPath}" == "" ]; then
        TestEnvironmentNum=1
        IsGitWorking="${False}"
        InGitWorking="${False}"
    elif [ "${gitWorkingRootPath}/test" == "${PWD}" ]; then
        TestEnvironmentNum=2
        IsGitWorking="${True}"
        InGitWorking="${False}"
    else
        TestEnvironmentNum=3
        IsGitWorking="${False}"
        InGitWorking="${True}"
    fi
    if [ "${WINDIR}" == "" ]; then  #// Linux
        local  dfOutput="$( df -h "." )"
        if echo "${dfOutput}"  |  grep -E '/dev/' > /dev/null; then
            :  #// NoOperation
        elif echo "${dfOutput}"  |  grep -E 'vagrant' > /dev/null; then
            TestEnvironmentNum=4
            #// git config --local  core.fileMode  false
            export LOCOMMIT_TMP="/tmp/locommit"
        else
            Error  "ERROR: Unknown environment in DetectTestEnvironment"
        fi
    fi
}

# pp
#     Debug print
# Example:
#     pp "$config"
#     pp "$config" config
#     pp "$array" array  ${#array[@]}  "${array[@]}"
#     pp "123"
#     $( pp "$config" >&2 )
function  pp() {
    local  value="$1"
    local  variableName="$2"
    if [ "${variableName}" != "" ]; then  variableName=" ${variableName} "  ;fi  #// Add spaces
    local  oldIFS="$IFS"
    IFS=$'\n'
    local  valueLines=( ${value} )
    IFS="$oldIFS"

    local  type=""
    if [ "${variableName}" != "" ]; then
        if [[ "$(declare -p ${variableName} 2>&1 )" =~ "declare -a" ]]; then
            local  type="array"
        fi
    fi
    if [ "${type}" == "" ]; then
        if [ "${#valueLines[@]}" == 1  -o  "${#valueLines[@]}" == 0 ]; then
            local  type="oneLine"
        else
            local  type="multiLine"
        fi
    fi

    if [[ "${type}" == "oneLine" ]]; then
        echo  "@@@${variableName}= \"${value}\" ---------------------------"  >&2
    elif [[ "${type}" == "multiLine" ]]; then
        echo  "@@@${variableName}---------------------------"  >&2
        echo  "\"${value}\"" >&2
    elif [[ "${type}" == "array" ]]; then
        echo  "@@@${variableName}---------------------------"  >&2
        local  count="$3"
        if [ "${count}" == "" ]; then
            echo  "[0]: \"$4\""  >&2
            echo  "[1]: ERROR: pp parameter is too few"  >&2
        else
            local  i=""
            for (( i = 0; i < ${count}; i += 1 ));do
                echo  "[$i]: \"$4\""  >&2
                shift
            done
        fi
    else
        echo  "@@@${variableName}? ---------------------------"  >&2
    fi
}

True=0
False=1
GitInitOption=$(gitInitOption)
TestEnvironmentNum=0
InGitWorking=""
IsGitWorking=""
LocommitEMail="locommit@example.com"
LocommitUser="locommit"

AllTest
